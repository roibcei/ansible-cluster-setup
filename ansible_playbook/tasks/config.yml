---
- hosts: localhost
  gather_facts: false
  collections:
    - netapp.ontap
  vars_files: "{{ file }}"
  vars:
    login: &login
      hostname: "{{ hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      https: true
      validate_certs: false
     # ansible_command_timeout: 10
  name: "Build Configurations: {{ cluster }}"

  tasks:
    - name: Set Cluster HA
      na_ontap_command:
        command: ['set d -c off ; cluster ha modify -configured true']
        <<: *login

    - name: Set Login Message
      na_ontap_command:
        command: ['security login banner modify -vserver ', "{{ cluster }}", ' -message ', "{{ motd }}"]
        <<: *login
      when: motd != None

    - name: Add licenses
      na_ontap_license:
        state: present
        license_codes: "{{ licenses |list }}"
        <<: *login

    - name: Clean Unused licenses
      na_ontap_command:
        command: ['set', 'd', '-c', 'off', ';', 'license', 'clean-up', '-unused', 'true']
        <<: *login

    - name: Remove Disk Partition Ownership from Node02 #Fixed
      na_ontap_command:
        command: ['set d -c off;  disk option modify -node ',"{{ hosts['node1'].name }}",' -autoassign off;disk option modify -node ',"{{ hosts['node2'].name }}",' -autoassign off;disk partition removeowner { -partition-index 1 -owner-node-name ',"{{ hosts['node2'].name }}" , ' -container-type spare }']
        <<: *login
   
    - name: Remove Disk Ownership from whole disks
      na_ontap_command:
        command: ['set d -c off; disk removeowner {-owner ',"{{ hosts['node1'].name }}",' -container-type spare}; disk removeowner {-owner ',"{{ hosts['node2'].name }}",' -container-type spare}']
        <<: *login

    - name: Assign Disk Partition Ownership to Node01 # Fixed
      na_ontap_command:
        command: ['set d -c off ;disk partition assign {-container-type unassigned } -owner ', "{{ hosts['node1'].name }}"]
        <<: *login

    - name: Assign Specific Disks for creating Aggregates
      na_ontap_command:
        command: ['set d -c off; disk assign -type {{ item.disktype }} -count {{ item.diskcount | int + 1 }} -owner {{ item.node }}']
        <<: *login
      with_items:
        "{{ aggrs }}"
      when: aggrs != None

    - name: Assign FlashPool Disks
      na_ontap_command:
        command: ['set d -c off; disk assign -type SSD -count {{ item.diskcount | int + 1}} -owner {{ item.node }}']
        <<: *login
      with_items:
        "{{ aggrs }}"
      when: (item.diskcount > 0)

    - name: Zero Spares and Enable Auto-Assign #Fixed !
      na_ontap_command:
        command: ['set', 'd', '-c', 'off', ';', 'disk', 'zerospares']
        command: ['set d -c off;  disk option modify -node ',"{{ hosts['node1'].name }}",' -autoassign on;disk option modify -node ',"{{ hosts['node2'].name }}",' -autoassign on; disk zerospares']
        <<: *login

    - name: Modify Service Processor Network
      na_ontap_service_processor_network:
        node: "{{ item.node }}"
        dhcp: none
        is_enabled: true
        address_type: ipv4
        state: present
        ip_address: "{{ item.ip_address }}"
        gateway_ip_address: "{{ item.gateway }}"
        netmask: "{{ item.netmask }}"
        <<: *login
      with_items:
        "{{ sp }}"
      when: sp != None


# Create aggregate_name
    - name: Create Aggregates
      na_ontap_aggregate:
        state: present
        service_state: online
        name: "{{ item.name }}"
        disk_count: "{{ item.diskcount }}"
        disk_size_with_unit: "{{ item.disksize }}"
        raid_type: "{{ item.raidtype }}"
        disk_type: "{{ item.disktype }}"
        raid_size: "{{ item.raidsize }}"
        nodes: "{{ item.node }}"
        <<: *login
      with_items:
        "{{ aggrs }}"
      when: aggrs != none
      tags: aggr
    
    - name: Adding Flash-Pool to Aggregate
      na_ontap_command:
        command: ["storage aggregate modify -aggregate {{item.name}} -hybrid-enabled true; storage aggregate add-disks -aggregate {{item.name}} -diskcount {{item.ssdcount}} -disktype SSD -raidtype raid4"]
        return_dict: true
        <<: *login
      with_items:
        "{{ aggrs }}"
      when: (item.ssdcount > 0)
      tags: aggr1
      register: FlashPool
    #- debug: 
    #    msg: "{{ item.stdout_lines }}"
    #  with_items: "{{ FlashPool.results }}"

    - name: Set Battery Override init
      na_ontap_command:
        command: ['set d -c off ; systemshell -node ',"{{ hosts['node1'].name }}",' -command sudo kenv -p bootarg.init.battery_override=true ; systemshell -node ',"{{ hosts['node2'].name }}",' -command sudo kenv -p bootarg.init.battery_override=true']
        <<: *login

    - name: Set NTP Server
      ignore_errors: yes
      na_ontap_ntp:
        state: present
        server_name: "{{ item.server_name }}"
        version: "{{ item.version }}"
        #ontapi: "{{ ontap_facts.ontap_version }}"
        <<: *login
      with_items:
        "{{ ntp }}"
      when: ntp != None
      tags: ntp

    - name: Create SNMP community
      na_ontap_snmp:
        community_name: "{{ item.community_name }}"
        access_control: "{{ item.access_control }}"
        #ontapi: "{{ ontap_facts.ontap_version }}"
        <<: *login
      with_items:
        "{{ snmp }}"
      when: snmp != None

    - name: Rename bcast
      na_ontap_command:
        command: ['broadcast-domain rename -broadcast-domain ',"{{ bcastRename.old_name }}",' -new-name ',"{{ bcastRename.new_name }}"]
        <<: *login

    - name: Remove Ports from Default Broadcast Domain
      na_ontap_broadcast_domain_ports:
        state: absent
        broadcast_domain: "{{ bcastRename.new_name }}"
        ports: "{{ item.node }}:{{ item.port }}"
        <<: *login
      with_items:
        "{{ ports }}"
      when: ports != None

    - name: Modify MTU to existing bcast
      async: 6
      poll: 2
      ignore_errors: true
      na_ontap_broadcast_domain:
        state: present
        name: "{{mgmt_broadcast_name}}"
        mtu: "{{ mgmt_broadcast_mtu }}"
        <<: *login

    - name: Modify Net Port
      ignore_errors: yes
      na_ontap_net_port:
        state: present
        node: "{{ item.node }}"
        port: "{{ item.port }}"
        mtu: "{{ item.mtu }}"
        autonegotiate_admin: "{{ item.autonegotiate }}"
        flowcontrol_admin: "{{ item.flowcontrol }}"
        #ontapi: "{{ ontap_facts.ontap_version }}"
        <<: *login
      with_items:
        "{{ ports }}"
      when: ports != None

    - name: Create ifgrp
      na_ontap_net_ifgrp:
        state: present
        distribution_function: "{{ item.distribution_function }}" #goes to default
        mode: "{{ item.mode }}" #goes to default
        name: "{{ item.name }}"
        ports: "{{ item.ports }}"
        node: "{{ item.node }}"
        <<: *login
      with_items:
        "{{ ifgrps }}"
      when: ifgrps != None

    - name: Modify Net Port ifgrp
      na_ontap_net_port:
        state: present
        node: "{{ item.node }}"
        port: "{{ item.name }}"
        mtu: "{{ item.mtu }}"
        #ontapi: "{{ ontap_facts.ontap_version }}"
        <<: *login
      with_items:
        "{{ ifgrps }}"
      when: ifgrps != None

    - name: Create VLAN
      na_ontap_net_vlan:
        state: present
        vlanid: "{{ item.vlanid }}"
        node: "{{ item.node }}"
        parent_interface: "{{ item.phy_interface }}"
        <<: *login
      with_items:
        "{{ vlans }}"
      when: vlans != None

    - name: Handle the error
      block:
        - name: create broadcast domain
          no_log: true
          #ignore_errors: yes
          async: 6
          poll: 5
          na_ontap_broadcast_domain:
            state: present
            broadcast_domain: "{{ item.name }}"
            mtu: "{{ item.mtu }}"
            ipspace: "Default"
            ports: "{{ item.ports }}"
            <<: *login
          with_items:
            "{{ bcasts }}"
          when: bcasts != None
      rescue:
        - debug:
            msg: "You cannot change Mgmt port Broadcast domain"

    - name: Limit Info Gathering to Broadcast Domain
      na_ontap_info:
        state: info
        gather_subset:
          - net_port_broadcast_domain_info
        <<: *login
      register: ontap_info_bcast
      tags: debug

    - fail:
        msg: " Mgmt port MTU has NOT been changed to {{ mgmt_broadcast_mtu }} "
      when: "{{ ontap_info_bcast.ontap_info.net_port_broadcast_domain_info['BD-Mgmt:Default'].mtu }} != {{ mgmt_broadcast_mtu }}"
      tags: debug


    - name: Create Vserver
      na_ontap_svm:
        state: present
        name: "{{ item.name }}"
        root_volume: "{{ item.name }}_root"
        root_volume_aggregate: "{{ item.root_volume_aggregate }}"
        root_volume_security_style: "{{ item.root_volume_security_style}}"
        <<: *login
      with_items:
        "{{ vservers }}"
      when: vservers != None
      tags: vserver

    - name: Create Login Users
      na_ontap_user:
        state: present
        name: "{{ item.username }}" 
        applications: "{{ item.apps }}"
        authentication_method: password
        set_password: "{{ item.password }}"
        role_name: "{{ item.role }}"
        vserver: "{{ item.vserver }}"
        <<: *login
      with_items:
        "{{ loginUsers }}"
      when: loginUsers != None

    - name: Create interfaces
      na_ontap_interface:
        state: present
        interface_name: "{{ item.name }}"
        home_port: "{{ item.port }}"
        home_node: "{{ item.node }}"
        role: "{{ item.role }}" #data
        protocols: "{{ item.protocols }}" #cifs,nfs
        firewall_policy: "{{ item.firewall_policy }}"
        admin_status: up
        address: "{{ item.address }}"
        netmask: "{{ item.netmask }}"
        #force_subnet_association: false
        vserver: "{{ item.vserver }}"
        <<: *login
      with_items:
        "{{ lifs }}"
      when: lifs != None
      tags: lifs

#   - name: Modify Mgmt interfaces
#      na_ontap_interface:
#        state: present
#        interface_name: "{{ item.name }}"
#        home_port: "{{ item.port }}"
#        home_node: "{{ item.node }}"
#        role: "{{ item.role }}" #data
#        admin_status: up
#        address: "{{ item.address }}"
#        netmask: "{{ item.netmask }}"
#        vserver: "{{ item.vserver }}"
#        <<: *login
#      with_items:
#        "{{ lifsMgmt }}"
#      when: lifsMgmt != None

    - name: Create Routes
      na_ontap_net_routes:
        state: present
        vserver: "{{ item.vserver }}"
        destination: "{{ item.destination }}"
        gateway: "{{ item.gateway }}"
        metric: 20
        <<: *login
      with_items:
        "{{ gateway }}"
      when: gateway != None

    - name: Setup DNS
      na_ontap_dns:
        state: present
        vserver: "{{ item.vserver }}"
        domains: "{{ item.dns_domains }}"
        nameservers: "{{ item.dns_nameservers }}"
        #ontapi: "{{ ontap_facts.ontap_version }}"
        skip_validation: "true"
        <<: *login
      with_items:
        "{{ dns }}"
      when: dns != None

    - name: Modify Export Policy Default to 0.0.0.0/0
      na_ontap_export_policy_rule:
        state: present
        allow_suid: true
        client_match: "0.0.0.0/0"
        policy_name: "default"
        protocol: "nfs"
        ro_rule: "any"
        rw_rule: "any"
        super_user_security: "any"
        vserver: "{{ item.name }}"
        <<: *login
      with_items:
        "{{ vservers }}"
      when: vservers != None

    - name: Create Export Policy Rules
      na_ontap_export_policy_rule:
        state: present
        allow_suid: true
        client_match: "{{ item.client_match }}"
        policy_name: "{{ item.name }}"
        protocol: "nfs"
        ro_rule: "any"
        rw_rule: "any"
        super_user_security: "any"
        vserver: "{{ item.vserver }}"
        <<: *login
      with_items:
        "{{ exportrules }}"
      when: exportrules != None

    - name: Add Volumes
      na_ontap_volume:
        state: present
        name: "{{ item.name }}"
        junction_path: "/{{ item.name }}"
        is_infinite: False
        aggregate_name: "{{ item.aggr }}"
        size: "{{ item.size }}"
        size_unit: gb
        space_guarantee: none
        policy: "{{ item.policy }}"
        percent_snapshot_space: "{{ item.snappercent }}"
        vserver: "{{ item.vserver }}"
        volume_security_style: "{{ item.securitystyle }}"
        wait_for_completion: false
        <<: *login
      with_items:
        "{{ volumes }}"
      when: volumes != None

    - name: Create CIFS server - Active Directory
      ignore_errors: yes
      na_ontap_cifs_server:
        state: present
        cifs_server_name: "{{ item.cifs_server_name}}"
        admin_user_name: "{{ item.admin_user }}"
        admin_password: "{{ item.admin_password }}"
        vserver: "{{ item.vserver }}"
        domain: "{{ item.domain }}"
        <<: *login
      with_items:
        "{{ cifsad }}"
      when: cifsad != None

    - name: Create CIFS server - Workgroup
      na_ontap_cifs_server:
        state: present
        cifs_server_name: "{{ item.cifs_server_name}}"
        vserver: "{{ item.vserver }}"
        workgroup: "{{ item.workgroup }}"
        service_state: started
        <<: *login
      with_items:
        "{{ cifsworkgroup }}"
      when: cifsworkgroup != None

    - name: Create and Configure NFS server
      na_ontap_nfs:
        state: present
        service_state: started
        vserver: "{{ item.vserver }}"
        nfsv3: "{{ item.nfsv3 }}"
        nfsv4: "{{ item.nfsv4 }}"
        nfsv41: "{{ item.nfsv41 }}"
        vstorage_state: "{{ item.vstorage }}"
        <<: *login
      with_items:
        "{{ nfs }}"
      when: nfs != None

    - name: Create CIFS share
      na_ontap_cifs:
        state: present
        share_name: "{{ item.share_name }}"
        path: "{{ item.vol_path }}"
        vserver: "{{ item.vserver }}"
        share_properties: browsable,oplocks
        symlink_properties: read_only,enable
        <<: *login
      with_items:
        "{{ cifsShares }}"
      when: cifsShares != None

#    - name: Modify or Create ACL on Cifs Share
#      na_ontap_cifs_acl:
#        state: present
#        share_name: "{{ item.share_name }}"
#        user_or_group: "{{ item.user }}"
#        permission: "{{ item.permission }}"
#        vserver: "{{ item.vserver }}"
#        <<: *login
#      with_items:
#        "{{ cifsAcl }}"
#      when: cifsAcl != None

    - name: Modify Mgmt Home Port
      no_log: true
      async: 10
      poll: 5
      na_ontap_command:
        command: ['set d -c off ; network interface modify {-vserver ',"{{ cluster }}",'} -home-port ',"{{ mgmt_home_port }}",' ; network interface revert *']
        <<: *login
    #  na_ontap_software_update:
     #    state: present
    #    nodes: "{{ item }}"
    #    package_url: "{{ url }}"
    #    package_version: "{{ version_name }}"
    #    ignore_validation_warning: True
    #  loop: "{{ ontap_facts.cluster_node_info | list }}"

